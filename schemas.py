# backend/schemas.py
# Data validation schemas (Pydantic)

from pydantic import BaseModel, EmailStr, ConfigDict
from typing import List, Optional, Any
from datetime import date
from decimal import Decimal

# --- Base Schemas ---
# These are the foundational building blocks for other schemas.

class TransactionBase(BaseModel):
    """
    Core fields for a transaction that are used for both creation and reading.
    """
    transaction_date: date
    beneficiary: str
    amount: Decimal
    category: Optional[str] = None
    labels: Optional[List[str]] = None
    is_private: bool = False
    raw_data: Optional[Any] = None

class UserBase(BaseModel):
    """
    Core fields for a user.
    """
    email: EmailStr


# --- Schemas for Creating Data ---
# These schemas are used when receiving data from the client (e.g., in a POST request).

class TransactionCreate(TransactionBase):
    """
    Schema for creating a new transaction. Inherits all fields from TransactionBase.
    No extra fields are needed for creation, but having a separate class is good practice.
    """
    pass

class UserCreate(UserBase):
    """
    Schema for creating a new user. Requires a password.
    """
    password: str


# --- Schemas for Reading Data ---
# These schemas are used when sending data back to the client.
# They often include fields generated by the database, like 'id', and exclude sensitive data.

class Transaction(TransactionBase):
    """
    Schema for reading a transaction. Includes the database ID.
    """
    id: int
    owner_id: int

    # Updated for Pydantic v2 - replaces the old Config class
    model_config = ConfigDict(from_attributes=True)

class User(UserBase):
    """
    Schema for reading user data. Excludes the password. Includes the database ID
    and a list of associated transactions.
    """
    id: int
    transactions: List[Transaction] = []

    # Updated for Pydantic v2 - replaces the old Config class
    model_config = ConfigDict(from_attributes=True)


# --- Schemas for Authentication ---

class Token(BaseModel):
    """
    Schema for the authentication token returned upon successful login.
    """
    access_token: str
    token_type: str

class TokenData(BaseModel):
    """
    Schema for the data contained within the JWT token.
    """
    email: Optional[str] = None